#!/bin/bash
#!/bin/bash

# VM Storage Pool Verification Script
# Verifies storage pools and provides troubleshooting information

set -euo pipefail

SCRIPT_NAME="$(basename "$0")"
LOG_PREFIX="[$SCRIPT_NAME]"

# Color output functions
log_info() { echo -e "\033[1;34m${LOG_PREFIX} INFO:\033[0m $*"; }
log_success() { echo -e "\033[1;32m${LOG_PREFIX} SUCCESS:\033[0m $*"; }
log_warning() { echo -e "\033[1;33m${LOG_PREFIX} WARNING:\033[0m $*"; }
log_error() { echo -e "\033[1;31m${LOG_PREFIX} ERROR:\033[0m $*"; }

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    log_error "This script must be run as root (storage pool verification requires privileges)"
    exit 1
fi

log_info "Verifying storage pool configuration..."

echo "=== Current Storage Pool Status ==="
virsh pool-list --all

echo
echo "=== Detailed Pool Information ==="

# Check each expected pool
EXPECTED_POOLS=("windows-vms" "iso-images" "default")

for pool in "${EXPECTED_POOLS[@]}"; do
    echo
    echo "--- Checking Pool: $pool ---"
    
    if virsh pool-info "$pool" &>/dev/null; then
        # Pool exists, show details
        virsh pool-info "$pool"
        
        # Show pool path
        local pool_path=$(virsh pool-dumpxml "$pool" | grep -A1 "<target>" | grep "<path>" | sed 's/.*<path>\(.*\)<\/path>.*/\1/')
        echo "Pool Path: $pool_path"
        
        # Check if path exists and permissions
        if [[ -d "$pool_path" ]]; then
            echo "Directory Status: EXISTS"
            ls -la "$pool_path" | head -5
            
            # Count volumes
            local vol_count=$(virsh vol-list "$pool" 2>/dev/null | tail -n +3 | grep -v "^$" | wc -l)
            echo "Volume Count: $vol_count"
            
            if [[ $vol_count -gt 0 ]]; then
                echo "Volumes:"
                virsh vol-list "$pool"
            fi
        else
            log_error "Directory $pool_path does not exist!"
        fi
        
        # Check pool state
        local state=$(virsh pool-info "$pool" | grep "State:" | awk '{print $2}')
        local autostart=$(virsh pool-info "$pool" | grep "Autostart:" | awk '{print $2}')
        
        if [[ "$state" != "running" ]]; then
            log_warning "Pool '$pool' is not running (state: $state)"
        fi
        
        if [[ "$autostart" != "yes" ]]; then
            log_warning "Pool '$pool' autostart is disabled"
        fi
        
    else
        log_error "Pool '$pool' not found!"
    fi
done

echo
echo "=== VM Disk Verification ==="

# Check for your specific VM files
VM_PATHS=(
    "/home/evm/windows/winhome"
    "/home/evm/windows/win10-data.qcow2"
    "/home/evm/iso/virtio-win.iso"
)

for vm_file in "${VM_PATHS[@]}"; do
    echo
    echo "--- Checking VM file: $vm_file ---"
    
    if [[ -f "$vm_file" ]]; then
        log_success "File exists: $vm_file"
        
        # Show file details
        ls -lh "$vm_file"
        
        # Check if it's a qcow2 file and show info
        if [[ "$vm_file" == *.qcow2 ]] && command -v qemu-img &>/dev/null; then
            echo "QEMU Image Info:"
            qemu-img info "$vm_file"
        fi
        
        # Check which pool should contain this file
        local dir_path=$(dirname "$vm_file")
        echo "Directory: $dir_path"
        
        # Try to find which pool contains this directory
        for pool in "${EXPECTED_POOLS[@]}"; do
            if virsh pool-info "$pool" &>/dev/null; then
                local pool_path=$(virsh pool-dumpxml "$pool" | grep -A1 "<target>" | grep "<path>" | sed 's/.*<path>\(.*\)<\/path>.*/\1/')
                if [[ "$vm_file" == "$pool_path"/* ]]; then
                    echo "Should be in pool: $pool"
                    
                    # Check if pool actually sees this file
                    local filename=$(basename "$vm_file")
                    if virsh vol-info --pool "$pool" "$filename" &>/dev/null; then
                        log_success "File is recognized by pool '$pool'"
                    else
                        log_warning "File exists but not recognized by pool '$pool'"
                        log_info "Try: virsh pool-refresh $pool"
                    fi
                    break
                fi
            fi
        done
        
    else
        log_warning "File not found: $vm_file"
    fi
done

echo
echo "=== Storage Pool Configuration Files ==="
echo "Pool XML files location: /etc/libvirt/storage/"

if [[ -d "/etc/libvirt/storage" ]]; then
    ls -la /etc/libvirt/storage/
    
    echo
    echo "Autostart symlinks: /etc/libvirt/storage/autostart/"
    if [[ -d "/etc/libvirt/storage/autostart" ]]; then
        ls -la /etc/libvirt/storage/autostart/
    else
        log_warning "Autostart directory not found"
    fi
else
    log_error "Libvirt storage directory not found!"
fi

echo
echo "=== Troubleshooting Commands ==="
echo "If pools are missing or not working:"
echo "  1. Run the storage pool creation script: ./vm_recreate_storage_pools.sh"
echo "  2. Refresh pools: virsh pool-refresh <pool-name>"
echo "  3. Start inactive pools: virsh pool-start <pool-name>"
echo "  4. Enable autostart: virsh pool-autostart <pool-name>"
echo "  5. Check libvirtd status: systemctl status libvirtd"

echo
echo "=== File System Space Check ==="
df -h /home/evm /var/lib/libvirt

echo
echo "=== libvirtd Service Status ==="
systemctl status libvirtd --no-pager -l

log_info "Storage verification completed!"

# Summary
echo
echo "=== SUMMARY ==="
echo "Expected pools: ${EXPECTED_POOLS[*]}"

for pool in "${EXPECTED_POOLS[@]}"; do
    if virsh pool-info "$pool" &>/dev/null; then
        local state=$(virsh pool-info "$pool" | grep "State:" | awk '{print $2}')
        if [[ "$state" == "running" ]]; then
            log_success "Pool '$pool': RUNNING"
        else
            log_warning "Pool '$pool': $state"
        fi
    else
        log_error "Pool '$pool': NOT FOUND"
    fi
done
