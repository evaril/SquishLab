#!/usr/bin/env bash

# Script to prepare Arch base system and build deterministic, hardened kernel

set -euo pipefail

ARCH_URL="https://mirror.rackspace.com/archlinux/iso/latest/archlinux-x86_64.iso"
KERNEL_NAME="linux-hardened"
KERNEL_BUILD_DIR="$HOME/kernel-build"
KERNEL_CONFIG="/usr/lib/modules/$(uname -r)/build/.config"
INSTALL_ROOT="/mnt/arch-hardened"
ISO_PATH="$HOME/iso/archlinux-x86_64.iso"

EXTRA_HARDEN_FLAGS=(
  CONFIG_SECURITY_LOCKDOWN_LSM=y
  CONFIG_LOCK_DOWN_KERNEL_FORCE_NONE=y
  CONFIG_MODULE_SIG_FORCE=y
  CONFIG_MODULE_SIG_ALL=y
  CONFIG_MODULE_SIG_SHA512=y
  CONFIG_DEBUG_RODATA=y
  CONFIG_DEBUG_WX=y
  CONFIG_STACKPROTECTOR_STRONG=y
  CONFIG_RANDOMIZE_BASE=y
  CONFIG_KEXEC=n
  CONFIG_STRICT_KERNEL_RWX=y
  CONFIG_STATIC_USERMODEHELPER=y
  CONFIG_SECURITY=y
  CONFIG_SECURITY_YAMA=y
  CONFIG_SECURITY_DMESG_RESTRICT=y
  CONFIG_PAGE_TABLE_ISOLATION=y
  CONFIG_SLUB_DEBUG_ON=y
  CONFIG_PAGE_POISONING=y
  CONFIG_PREEMPT_NONE=y
  CONFIG_PREEMPT_VOLUNTARY=n
  CONFIG_PREEMPT=y
  CONFIG_NO_HZ=n
  CONFIG_NO_HZ_IDLE=n
  CONFIG_HZ_FIXED=100
  CONFIG_HZ_100=y
  CONFIG_HZ=100
  CONFIG_IRQ_FORCED_THREADING=n
  CONFIG_CPU_FREQ=n
  CONFIG_TIMER_STATS=n
  CONFIG_SCHED_DEBUG=n
  CONFIG_RT_GROUP_SCHED=n
  CONFIG_CGROUPS=n
  CONFIG_CGROUP_SCHED=n
  CONFIG_FAIR_GROUP_SCHED=n
  CONFIG_RELOCATABLE=n
)

echo "[+] Downloading latest Arch ISO..."
mkdir -p "$HOME/iso" && cd "$HOME/iso"
[ ! -f archlinux-x86_64.iso ] && curl -LO "$ARCH_URL" || echo "[!] ISO already downloaded."

echo "[+] Mounting ISO and extracting base system..."
sudo mkdir -p /mnt/archiso
mountpoint -q /mnt/archiso || sudo mount -o loop archlinux-x86_64.iso /mnt/archiso

command -v unsquashfs &>/dev/null || { echo "[!] Installing squashfs-tools..."; sudo pacman -Sy --noconfirm squashfs-tools; }

if mountpoint -q "$INSTALL_ROOT"; then
  echo "[!] Unmounting previous bind mounts..."
  for mnt in proc sys dev; do
    mountpoint -q "$INSTALL_ROOT/$mnt" && sudo umount -lf "$INSTALL_ROOT/$mnt" || true
  done
  sudo umount -R "$INSTALL_ROOT" || true
fi

if [ -d "$INSTALL_ROOT" ]; then
  echo "[!] Cleaning up old chroot directory..."
  sudo find "$INSTALL_ROOT" -xdev -mindepth 1 -exec rm -rf {} +
fi

sudo unsquashfs -d "$INSTALL_ROOT" /mnt/archiso/arch/x86_64/airootfs.sfs

for dir in dev proc sys; do sudo mount --bind /$dir "$INSTALL_ROOT/$dir"; done

# DNS fallback setup
echo "[+] Configuring fallback DNS resolvers..."
echo -e "nameserver 1.1.1.1\nnameserver 9.9.9.9" | sudo tee "$INSTALL_ROOT/etc/resolv.conf"

# Force static hosts file
cat <<EOF | sudo tee "$INSTALL_ROOT/etc/hosts" > /dev/null
127.0.0.1 localhost
::1       localhost
EOF

# Ensure host DNS works in chroot
sudo cp /etc/resolv.conf "$INSTALL_ROOT/etc/resolv.conf"

# Improved network diagnostic script
cat <<'EOF' | sudo tee "$INSTALL_ROOT/tmp/network-check.sh" > /dev/null
#!/bin/bash
ping -c1 1.1.1.1 >/dev/null 2>&1 || { echo "[!] Cannot ping 1.1.1.1"; exit 1; }
getent hosts archlinux.org >/dev/null 2>&1 || { echo "[!] DNS resolution failed"; exit 1; }
exit 0
EOF
sudo chmod +x "$INSTALL_ROOT/tmp/network-check.sh"

echo "[+] Installing build tools (forcing reliable mirror)..."
echo "Server = https://geo.mirror.pkgbuild.com/\$repo/os/\$arch" | sudo tee "$INSTALL_ROOT/etc/pacman.d/mirrorlist"
sudo chroot "$INSTALL_ROOT" /tmp/network-check.sh || { echo "[✘] Network unreachable in chroot. Check default route, DNS, or firewall."; exit 1; }
sudo chroot "$INSTALL_ROOT" pacman -Sy --noconfirm archlinux-keyring || exit 1
sudo chroot "$INSTALL_ROOT" pacman -Sy --noconfirm base base-devel linux-firmware git bc bison flex elfutils openssl zstd dpkg || exit 1

mkdir -p "$KERNEL_BUILD_DIR" && cd "$KERNEL_BUILD_DIR"
git clone https://git.archlinux.org/linux.git .

zcat /proc/config.gz > .config || cp "$KERNEL_CONFIG" .config
for FLAG in "${EXTRA_HARDEN_FLAGS[@]}"; do
  sed -i "s/^#\?\s*${FLAG%%=*}.*/${FLAG}/" .config || echo "$FLAG" >> .config
done

make olddefconfig
make -j"$(nproc)" bindeb-pkg LOCALVERSION=-hardened

echo "[+] Installing custom kernel in chroot..."
sudo cp ../linux-image-*-hardened.deb "$INSTALL_ROOT/root/"
sudo chroot "$INSTALL_ROOT" bash -c 'cd /root && dpkg -i linux-image-*-hardened.deb && rm -f linux-image-*-hardened.deb'

if [ -d /sys/firmware/efi ]; then
  echo "[+] Configuring systemd-boot..."
  bootctl --path="$INSTALL_ROOT/boot" install
  cat <<EOL | sudo tee "$INSTALL_ROOT/boot/loader/entries/arch-hardened.conf"
title   Arch Linux Hardened
linux   /vmlinuz-linux-hardened
initrd  /initramfs-linux-hardened.img
options root=LABEL=ROOT rw lsm=lockdown,yama,apparmor
EOL
  echo "default arch-hardened" | sudo tee "$INSTALL_ROOT/boot/loader/loader.conf"
fi

echo "[✔] Kernel build and setup complete. Chroot into $INSTALL_ROOT to finalize setup."
echo "Don't forget mkinitcpio, boot entries, and package configurations."
 
