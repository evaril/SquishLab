#!/bin/bash
# SquishTools - Full Resolution Enhanced Version
# Author: evm  
# Version: 2.3-enhanced

set -euo pipefail

# Color functions
red() { printf '\033[0;31m%s\033[0m\n' "$*"; }
green() { printf '\033[0;32m%s\033[0m\n' "$*"; }
yellow() { printf '\033[1;33m%s\033[0m\n' "$*"; }
blue() { printf '\033[0;34m%s\033[0m\n' "$*"; }
cyan() { printf '\033[0;36m%s\033[0m\n' "$*"; }
bold() { printf '\033[1m%s\033[0m\n' "$*"; }

# Check if running as root/sudo
is_privileged() {
    [[ $EUID -eq 0 ]] || [[ -n "${SUDO_USER:-}" ]]
}

# Suggest sudo command if needed
suggest_sudo() {
    local cmd="$1"
    yellow "For full resolution, try: sudo $cmd"
}

# Enhanced file listing with multiple resolution levels
do_ls() {
    local path="${1:-.}"
    local recursive="${2:-false}"
    local basic_additional="${3:-false}"
    local full_additional="${4:-false}"
    
    blue "[INFO] File listing for: $path"
    echo "----------------------------------------"
    
    # Basic file listing (newest first)
    green "Files (newest first):"
    if command -v exa >/dev/null 2>&1; then
        if [[ "$full_additional" == "true" ]]; then
            exa -la --sort=modified --reverse --extended --git --time-style=long-iso "$path" | head -25
        else
            exa -la --sort=modified --reverse --git --time-style=long-iso "$path" | head -20
        fi
    else
        if [[ "$full_additional" == "true" ]]; then
            ls -lath --time-style=long-iso "$path" | head -25
        else
            ls -lat --time-style=long-iso "$path" | head -20
        fi
    fi
    
    # Recursive tree if requested
    if [[ "$recursive" == "true" ]]; then
        echo
        green "Directory tree:"
        if command -v exa >/dev/null 2>&1; then
            local depth=3
            [[ "$full_additional" == "true" ]] && depth=5
            exa --tree --level=$depth "$path" 2>/dev/null || find "$path" -type d | head -30
        else
            if [[ "$full_additional" == "true" ]]; then
                find "$path" -type d | head -50
            else
                find "$path" -type d | head -20
            fi
        fi
    fi
    
    # Additional details levels
    if [[ "$basic_additional" == "true" ]] || [[ "$full_additional" == "true" ]]; then
        echo
        green "Directory analysis:"
        
        # Directory sizes
        echo "Top directories by size:"
        du -sh "$path"/*/ 2>/dev/null | sort -hr | head -10 || echo "No subdirectories"
        
        echo
        local count=$(find "$path" -maxdepth 1 2>/dev/null | wc -l)
        echo "Total items: $count"
        
        # Git integration
        if [[ -d "$path/.git" ]] || git -C "$path" rev-parse --git-dir >/dev/null 2>&1; then
            echo
            cyan "Git repository status:"
            git -C "$path" status --porcelain 2>/dev/null | head -15 || echo "Clean working directory"
            
            if [[ "$full_additional" == "true" ]]; then
                echo
                cyan "Recent git activity:"
                git -C "$path" log --oneline -5 2>/dev/null || echo "No recent commits"
            fi
        fi
        
        # Disk usage summary
        echo
        local total_size=$(du -sh "$path" 2>/dev/null | cut -f1)
        echo "Total size: $total_size"
    fi
    
    # Full resolution extras
    if [[ "$full_additional" == "true" ]]; then
        echo
        green "Extended analysis:"
        
        # File types distribution
        echo "File types:"
        find "$path" -maxdepth 1 -type f 2>/dev/null | sed 's/.*\.//' | sort | uniq -c | sort -nr | head -10 || echo "No files found"
        
        # Permissions analysis
        echo
        echo "Permission distribution:"
        find "$path" -maxdepth 1 2>/dev/null | xargs ls -la 2>/dev/null | awk '{print $1}' | sort | uniq -c | sort -nr | head -8
        
        # Recently modified files (last 7 days)
        echo
        echo "Recently modified (last 7 days):"
        find "$path" -type f -mtime -7 2>/dev/null | head -10 || echo "No recent modifications"
        
        # Large files (>10MB)
        echo
        echo "Large files (>10MB):"
        find "$path" -type f -size +10M 2>/dev/null | head -5 || echo "No large files found"
        
        # Extended attributes (if available)
        if command -v getfattr >/dev/null 2>&1; then
            echo
            echo "Extended attributes sample:"
            find "$path" -maxdepth 1 -type f 2>/dev/null | head -3 | while read file; do
                attrs=$(getfattr "$file" 2>/dev/null | grep -v "^#" | head -2)
                [[ -n "$attrs" ]] && echo "$file: $attrs"
            done
        fi
    fi
    
    green "[OK] File listing completed"
}

# Enhanced network analysis with resolution levels
do_net() {
    local basic_additional="${1:-false}"
    local full_additional="${2:-false}"
    
    blue "[INFO] Network connection analysis"
    echo "----------------------------------------"
    
    # Layer 1: Basic connections (always works)
    green "Active network connections:"
    if command -v ss >/dev/null 2>&1; then
        if [[ "$full_additional" == "true" ]]; then
            ss -tulpnH 2>/dev/null | head -20
        else
            ss -tulpn 2>/dev/null | head -15
        fi
    elif command -v lsof >/dev/null 2>&1; then
        lsof -i -n -P 2>/dev/null | grep -E '(LISTEN|ESTABLISHED)' | head -15
    else
        netstat -tulpn 2>/dev/null | head -15
    fi
    
    # Layer 2: Basic additional info  
    if [[ "$basic_additional" == "true" ]] || [[ "$full_additional" == "true" ]]; then
        echo
        green "Network processes:"
        
        # Try ss first (works without sudo)
        if command -v ss >/dev/null 2>&1; then
            local pids=$(ss -tulpn 2>/dev/null | awk -F',' '{print $2}' | grep -o 'pid=[0-9]*' | cut -d= -f2 | sort -u | head -10)
            for pid in $pids; do
                if [[ "$pid" =~ ^[0-9]+$ ]] && [[ -n "$pid" ]]; then
                    local cmd=$(ps -p "$pid" -o comm= 2>/dev/null || echo "Unknown")
                    local user=$(ps -p "$pid" -o user= 2>/dev/null || echo "Unknown")
                    echo "PID $pid ($user): $cmd"
                fi
            done
        fi
        
        # Port statistics
        echo
        echo "Port summary:"
        if command -v ss >/dev/null 2>&1; then
            echo "Listening ports: $(ss -tln 2>/dev/null | wc -l)"
            echo "Established connections: $(ss -t state established 2>/dev/null | wc -l)"
        else
            echo "Total connections: $(netstat -an 2>/dev/null | grep -c "LISTEN\|ESTABLISHED")"
        fi
    fi
    
    # Layer 3: Full resolution (may need sudo)
    if [[ "$full_additional" == "true" ]]; then
        echo
        green "Full resolution analysis:"
        
        # Enhanced process details
        echo "Detailed process information:"
        if is_privileged && command -v lsof >/dev/null 2>&1; then
            # Full lsof with process details
            cyan "Using privileged lsof for full details:"
            lsof -i -n -P | grep -E '(LISTEN|ESTABLISHED)' | head -15 | while read line; do
                echo "$line"
            done
        else
            # Non-privileged but detailed
            if command -v ss >/dev/null 2>&1; then
                ss -tulpn 2>/dev/null | head -15 | while read line; do
                    echo "$line"
                done
            fi
            if ! is_privileged; then
                echo
                suggest_sudo "$(basename "$0") net -AA"
            fi
        fi
        
        # Connection states analysis
        echo
        echo "Connection states:"
        if command -v ss >/dev/null 2>&1; then
            ss -tan 2>/dev/null | awk '{print $1}' | sort | uniq -c | sort -nr
        else
            netstat -tan 2>/dev/null | awk '{print $6}' | sort | uniq -c | sort -nr
        fi
        
        # Process tree for network processes
        echo
        green "Network process relationships:"
        if command -v pstree >/dev/null 2>&1; then
            # Get network PIDs and show their trees
            local net_pids=""
            if command -v ss >/dev/null 2>&1; then
                net_pids=$(ss -tulpn 2>/dev/null | awk -F',' '{print $2}' | grep -o 'pid=[0-9]*' | cut -d= -f2 | sort -u | head -5)
            fi
            
            for pid in $net_pids; do
                if [[ "$pid" =~ ^[0-9]+$ ]] && [[ -n "$pid" ]]; then
                    echo "Process tree for PID $pid:"
                    pstree -p "$pid" 2>/dev/null || echo "  $(ps -p $pid -o comm= 2>/dev/null)"
                fi
            done
        else
            echo "pstree not available - install psmisc package"
        fi
        
        # Network interface statistics
        echo
        echo "Interface statistics:"
        if [[ -r /proc/net/dev ]]; then
            cat /proc/net/dev | grep -v "lo:" | tail -n +3 | head -5
        fi
        
        # Open files by network processes (if privileged)
        if is_privileged && command -v lsof >/dev/null 2>&1; then
            echo
            cyan "Open files by network processes:"
            lsof -i -n -P | head -10 | awk '{print $2}' | sort -u | head -5 | while read pid; do
                if [[ "$pid" =~ ^[0-9]+$ ]]; then
                    local files=$(lsof -p "$pid" 2>/dev/null | wc -l)
                    local cmd=$(ps -p "$pid" -o comm= 2>/dev/null)
                    echo "PID $pid ($cmd): $files open files"
                fi
            done
        fi
    fi
    
    green "[OK] Network analysis completed"
}

# Combined overview with resolution levels
do_all() {
    local path="${1:-.}"
    local basic_additional="${2:-false}"
    local full_additional="${3:-false}"
    
    blue "[INFO] Combined system overview"
    if [[ "$full_additional" == "true" ]]; then
        echo "======================================== FULL RESOLUTION"
    else
        echo "========================================"
    fi
    
    do_ls "$path" false "$basic_additional" "$full_additional"
    echo
    echo "========================================"
    do_net "$basic_additional" "$full_additional"
    
    if [[ "$full_additional" == "true" ]]; then
        echo
        echo "========================================"
        green "System overview:"
        echo "Timestamp: $(date)"
        echo "User: $(whoami)"
        echo "Uptime: $(uptime | awk -F'up ' '{print $2}' | awk -F',' '{print $1}')"
        echo "Load: $(uptime | grep -o 'load average.*')"
        echo "Memory: $(free -h | grep Mem | awk '{print $3"/"$2}')"
        echo "Disk: $(df -h . | tail -1 | awk '{print $3"/"$2" ("$5" used)"}')"
    fi
    
    green "[OK] Combined overview completed"
}

# Enhanced help with resolution levels
show_help() {
    green "SquishTools v2.3-enhanced - Full Resolution System Inspector"
    echo
    yellow "USAGE:"
    echo "  $0 {ls|net|all} [path] [-R] [-A] [-AA]"
    echo
    yellow "MODULES:"
    echo "  ls   - File listing (newest first)"
    echo "  net  - Network connections" 
    echo "  all  - Combined overview"
    echo
    yellow "RESOLUTION LEVELS:"
    echo "  (none) - Basic working output"
    echo "  -A     - Additional details (no sudo needed)"
    echo "  -AA    - Full resolution (may suggest sudo for complete info)"
    echo
    yellow "OPTIONS:"
    echo "  -R     - Recursive analysis (ls only)"
    echo "  -h     - Show help"
    echo
    yellow "EXAMPLES:"
    echo "  $0 ls                    # Basic file listing"
    echo "  $0 ls -A                 # With directory analysis"
    echo "  $0 ls -AA -R             # Full resolution + recursive"
    echo "  $0 net                   # Basic network connections"
    echo "  $0 net -A                # With process details"
    echo "  $0 net -AA               # Full resolution (suggests sudo if needed)"
    echo "  $0 all -AA               # Complete system overview"
    echo "  sudo $0 net -AA          # Full privileged network analysis"
    echo
    yellow "RESOLUTION COMPARISON:"
    if is_privileged; then
        cyan "Running with elevated privileges - full resolution available"
    else
        echo "Running as regular user - some features suggest sudo for full resolution"
    fi
    echo
    yellow "DETECTED TOOLS:"
    if command -v exa >/dev/null 2>&1; then
        echo "  Files: exa (enhanced)"
    else
        echo "  Files: ls (standard)"
    fi
    
    if command -v ss >/dev/null 2>&1; then
        echo "  Network: ss (preferred - works without sudo)"
    elif command -v lsof >/dev/null 2>&1; then
        echo "  Network: lsof (powerful - best with sudo)"
    else
        echo "  Network: netstat (fallback)"
    fi
    
    [[ -x "$(command -v pstree)" ]] && echo "  Process trees: pstree (available)"
    [[ -x "$(command -v git)" ]] && echo "  Git integration: available"
    [[ -x "$(command -v getfattr)" ]] && echo "  Extended attributes: available"
}

# Enhanced argument parsing
main() {
    local module=""
    local path="."
    local recursive=false
    local basic_additional=false
    local full_additional=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            ls|net|all)
                module="$1"
                shift
                ;;
            -R)
                recursive=true
                shift
                ;;
            -A)
                basic_additional=true
                shift
                ;;
            -AA)
                full_additional=true
                basic_additional=true  # -AA implies -A
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            -*)
                red "[ERROR] Unknown option: $1"
                echo "Use -h for help"
                exit 1
                ;;
            *)
                if [[ -e "$1" ]] || [[ "$1" =~ ^[/.~] ]]; then
                    path="$1"
                else
                    red "[ERROR] Invalid path: $1"
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # Validate module
    if [[ -z "$module" ]]; then
        red "[ERROR] No module specified. Use: ls, net, or all"
        echo "Use -h for help"
        exit 1
    fi
    
    # Expand tilde
    path="${path/#\~/$HOME}"
    
    # Execute module with resolution levels
    case "$module" in
        "ls")
            do_ls "$path" "$recursive" "$basic_additional" "$full_additional"
            ;;
        "net")
            do_net "$basic_additional" "$full_additional"
            ;;
        "all")
            do_all "$path" "$basic_additional" "$full_additional"
            ;;
    esac
}

# Entry point
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 
