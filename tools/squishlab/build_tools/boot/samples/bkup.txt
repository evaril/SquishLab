#!/bin/bash
# squishConfigBackups.mscr - Configuration backup tool
# Author: evm
# Version: 2.0-safe

set -euo pipefail

# Color functions
red() { printf '\033[0;31m%s\033[0m\n' "$*"; }
green() { printf '\033[0;32m%s\033[0m\n' "$*"; }
yellow() { printf '\033[1;33m%s\033[0m\n' "$*"; }
blue() { printf '\033[0;34m%s\033[0m\n' "$*"; }

# Configuration
readonly CONFIG_BACKUP_DIR="$HOME/config-backups"
readonly TIMESTAMP="$(date +%Y%m%d-%H%M%S)"
readonly BACKUP_NAME="config-backup-$TIMESTAMP"

# Critical system files and directories
readonly SYSTEM_CONFIGS=(
    "/etc/fstab"
    "/etc/mkinitcpio.conf"
    "/etc/pacman.conf"
    "/etc/pacman.d/mirrorlist"
    "/etc/libvirt"
    "/etc/hosts"
    "/etc/hostname"
    "/etc/locale.conf"
    "/etc/vconsole.conf"
    "/boot/EFI/refind/refind.conf"
    "/etc/keys"
    "/etc/systemd/system"
    "/etc/udev/rules.d"
    "/etc/modprobe.d"
    "/etc/sysctl.d"
)

# User configuration files
readonly USER_CONFIGS=(
    "$HOME/.bashrc"
    "$HOME/.bash_profile"
    "$HOME/.config"
    "$HOME/.ssh"
    "$HOME/.gnupg"
    "$HOME/.gitconfig"
    "$HOME/.restic-env"
    "$HOME/utils"
    "$HOME/bin"
)

# LibVirt configurations
readonly LIBVIRT_CONFIGS=(
    "/etc/libvirt/qemu"
    "/etc/libvirt/storage"
    "/etc/libvirt/networks"
    "/var/lib/libvirt/images"
)

# Create backup directory
ensure_backup_dir() {
    if [[ ! -d "$CONFIG_BACKUP_DIR" ]]; then
        blue "Creating config backup directory: $CONFIG_BACKUP_DIR"
        mkdir -p "$CONFIG_BACKUP_DIR"
    fi
}

# Backup system configurations
backup_system_configs() {
    local backup_dir="$CONFIG_BACKUP_DIR/$BACKUP_NAME/system"
    mkdir -p "$backup_dir"
    
    blue "Backing up system configurations..."
    
    for config in "${SYSTEM_CONFIGS[@]}"; do
        if [[ -e "$config" ]]; then
            local dest_dir="$backup_dir$(dirname "$config")"
            mkdir -p "$dest_dir"
            
            if [[ -d "$config" ]]; then
                cp -r "$config" "$dest_dir/" 2>/dev/null || {
                    yellow "Warning: Could not backup $config (permission denied)"
                    continue
                }
            else
                cp "$config" "$dest_dir/" 2>/dev/null || {
                    yellow "Warning: Could not backup $config (permission denied)"
                    continue
                }
            fi
            echo "✓ $config"
        else
            echo "- $config (not found)"
        fi
    done
    
    green "System config backup completed"
}

# Backup user configurations
backup_user_configs() {
    local backup_dir="$CONFIG_BACKUP_DIR/$BACKUP_NAME/user"
    mkdir -p "$backup_dir"
    
    blue "Backing up user configurations..."
    
    for config in "${USER_CONFIGS[@]}"; do
        if [[ -e "$config" ]]; then
            local rel_path="${config#$HOME/}"
            local dest_dir="$backup_dir/$(dirname "$rel_path")"
            mkdir -p "$dest_dir"
            
            if [[ -d "$config" ]]; then
                cp -r "$config" "$dest_dir/"
            else
                cp "$config" "$dest_dir/"
            fi
            echo "✓ $config"
        else
            echo "- $config (not found)"
        fi
    done
    
    green "User config backup completed"
}

# Backup LibVirt configurations
backup_libvirt_configs() {
    local backup_dir="$CONFIG_BACKUP_DIR/$BACKUP_NAME/libvirt"
    mkdir -p "$backup_dir"
    
    blue "Backing up LibVirt configurations..."
    
    # VM definitions
    if command -v virsh >/dev/null 2>&1; then
        local vm_dir="$backup_dir/vm-definitions"
        mkdir -p "$vm_dir"
        
        # Export all defined VMs
        local vms
        vms=$(virsh list --all --name 2>/dev/null | grep -v '^$' || echo "")
        
        if [[ -n "$vms" ]]; then
            while read -r vm; do
                if [[ -n "$vm" ]]; then
                    virsh dumpxml "$vm" > "$vm_dir/${vm}.xml" 2>/dev/null && echo "✓ VM definition: $vm"
                fi
            done <<< "$vms"
        fi
        
        # Network definitions
        local net_dir="$backup_dir/network-definitions"
        mkdir -p "$net_dir"
        
        local networks
        networks=$(virsh net-list --all --name 2>/dev/null | grep -v '^$' || echo "")
        
        if [[ -n "$networks" ]]; then
            while read -r network; do
                if [[ -n "$network" ]]; then
                    virsh net-dumpxml "$network" > "$net_dir/${network}.xml" 2>/dev/null && echo "✓ Network definition: $network"
                fi
            done <<< "$networks"
        fi
        
        # Storage pool definitions
        local pool_dir="$backup_dir/pool-definitions"
        mkdir -p "$pool_dir"
        
        local pools
        pools=$(virsh pool-list --all --name 2>/dev/null | grep -v '^$' || echo "")
        
        if [[ -n "$pools" ]]; then
            while read -r pool; do
                if [[ -n "$pool" ]]; then
                    virsh pool-dumpxml "$pool" > "$pool_dir/${pool}.xml" 2>/dev/null && echo "✓ Storage pool definition: $pool"
                fi
            done <<< "$pools"
        fi
    fi
    
    # LibVirt config files
    for config in "${LIBVIRT_CONFIGS[@]}"; do
        if [[ -e "$config" ]] && [[ -r "$config" ]]; then
            local dest_dir="$backup_dir/config$(dirname "$config")"
            mkdir -p "$dest_dir"
            
            if [[ -d "$config" ]]; then
                cp -r "$config" "$dest_dir/" 2>/dev/null || yellow "Warning: Could not backup $config"
            else
                cp "$config" "$dest_dir/" 2>/dev/null || yellow "Warning: Could not backup $config"
            fi
            echo "✓ $config"
        fi
    done
    
    green "LibVirt config backup completed"
}

# Create package list backup
backup_package_list() {
    local backup_dir="$CONFIG_BACKUP_DIR/$BACKUP_NAME/packages"
    mkdir -p "$backup_dir"
    
    blue "Creating package lists..."
    
    # Explicitly installed packages
    pacman -Qe > "$backup_dir/explicitly-installed.txt"
    echo "✓ Explicitly installed packages"
    
    # All installed packages
    pacman -Q > "$backup_dir/all-installed.txt"
    echo "✓ All installed packages"
    
    # Foreign packages (AUR)
    pacman -Qm > "$backup_dir/foreign-packages.txt" 2>/dev/null || echo "No foreign packages"
    echo "✓ Foreign packages (AUR)"
    
    # Package database
    if [[ -d "/var/lib/pacman/local" ]]; then
        tar -czf "$backup_dir/pacman-database.tar.gz" -C /var/lib/pacman local 2>/dev/null || {
            yellow "Warning: Could not backup pacman database"
        }
        echo "✓ Pacman database"
    fi
    
    green "Package list backup completed"
}

# Create system info backup
backup_system_info() {
    local backup_dir="$CONFIG_BACKUP_DIR/$BACKUP_NAME/system-info"
    mkdir -p "$backup_dir"
    
    blue "Collecting system information..."
    
    # Hardware info
    lscpu > "$backup_dir/cpu-info.txt" 2>/dev/null
    lsblk > "$backup_dir/block-devices.txt" 2>/dev/null
    lsusb > "$backup_dir/usb-devices.txt" 2>/dev/null
    lspci > "$backup_dir/pci-devices.txt" 2>/dev/null
    
    # System info
    uname -a > "$backup_dir/kernel-info.txt"
    systemctl list-unit-files --state=enabled > "$backup_dir/enabled-services.txt"
    mount > "$backup_dir/mount-points.txt"
    df -h > "$backup_dir/disk-usage.txt"
    
    # Network info
    ip addr show > "$backup_dir/network-interfaces.txt" 2>/dev/null
    ss -tulpn > "$backup_dir/network-connections.txt" 2>/dev/null
    
    green "System info backup completed"
}

# Create backup manifest
create_manifest() {
    local manifest_file="$CONFIG_BACKUP_DIR/$BACKUP_NAME/MANIFEST.txt"
    
    blue "Creating backup manifest..."
    
    cat > "$manifest_file" << EOF
Configuration Backup Manifest
=============================
Backup Name: $BACKUP_NAME
Created: $(date)
Hostname: $(hostname)
User: $(whoami)
Kernel: $(uname -r)

Backup Contents:
- System configurations (/etc, boot configs)
- User configurations (~/.config, ~/.bashrc, etc.)
- LibVirt VM/network/storage definitions
- Package lists (pacman -Q, pacman -Qe, pacman -Qm)
- System information (hardware, services, mounts)

Restoration Notes:
- Review all files before restoration
- Use 'sudo' for system file restoration
- Reinstall packages with: pacman -S --needed - < packages/explicitly-installed.txt
- Import VM definitions with: virsh define vm-definitions/*.xml

Backup Directory Structure:
$(find "$CONFIG_BACKUP_DIR/$BACKUP_NAME" -type d | sort)

Total Files: $(find "$CONFIG_BACKUP_DIR/$BACKUP_NAME" -type f | wc -l)
Total Size: $(du -sh "$CONFIG_BACKUP_DIR/$BACKUP_NAME" | cut -f1)
EOF

    green "Manifest created: $manifest_file"
}

# List available backups
list_backups() {
    blue "Available configuration backups:"
    
    if [[ ! -d "$CONFIG_BACKUP_DIR" ]] || [[ -z "$(ls -A "$CONFIG_BACKUP_DIR" 2>/dev/null)" ]]; then
        yellow "No backups found in $CONFIG_BACKUP_DIR"
        return
    fi
    
    for backup in "$CONFIG_BACKUP_DIR"/config-backup-*; do
        if [[ -d "$backup" ]]; then
            local backup_name=$(basename "$backup")
            local backup_date=$(stat -c %y "$backup" | cut -d' ' -f1,2 | cut -d'.' -f1)
            local backup_size=$(du -sh "$backup" 2>/dev/null | cut -f1)
            
            echo "  $backup_name"
            echo "    Date: $backup_date"
            echo "    Size: $backup_size"
            echo "    Path: $backup"
            
            if [[ -f "$backup/MANIFEST.txt" ]]; then
                echo "    Manifest: Available"
            fi
            echo
        fi
    done
}

# Remove old backups
cleanup_old_backups() {
    local keep_count="${1:-5}"
    
    blue "Cleaning up old backups (keeping $keep_count most recent)..."
    
    if [[ ! -d "$CONFIG_BACKUP_DIR" ]]; then
        yellow "No backup directory found"
        return
    fi
    
    local backup_count
    backup_count=$(find "$CONFIG_BACKUP_DIR" -maxdepth 1 -name "config-backup-*" -type d | wc -l)
    
    if [[ $backup_count -le $keep_count ]]; then
        green "No cleanup needed (found $backup_count backups, keeping $keep_count)"
        return
    fi
    
    # Remove oldest backups
    find "$CONFIG_BACKUP_DIR" -maxdepth 1 -name "config-backup-*" -type d | \
        sort | \
        head -n -"$keep_count" | \
        while read -r old_backup; do
            echo "Removing: $(basename "$old_backup")"
            rm -rf "$old_backup"
        done
    
    green "Cleanup completed"
}

# Full backup process
full_backup() {
    ensure_backup_dir
    
    local backup_full_path="$CONFIG_BACKUP_DIR/$BACKUP_NAME"
    blue "Starting full configuration backup: $BACKUP_NAME"
    blue "Backup location: $backup_full_path"
    
    backup_system_configs
    backup_user_configs
    backup_libvirt_configs
    backup_package_list
    backup_system_info
    create_manifest
    
    green "Full configuration backup completed!"
    green "Backup saved to: $backup_full_path"
    
    # Show backup size
    local backup_size
    backup_size=$(du -sh "$backup_full_path" | cut -f1)
    echo "Total backup size: $backup_size"
}

# Show usage
show_usage() {
    green "squishConfigBackups v2.0-safe"
    echo
    yellow "USAGE:"
    echo "  $0 {full|list|cleanup} [options]"
    echo
    yellow "COMMANDS:"
    echo "  full       - Create full configuration backup"
    echo "  list       - List available backups"
    echo "  cleanup    - Remove old backups (keep 5 most recent)"
    echo
    yellow "OPTIONS:"
    echo "  cleanup N  - Keep N most recent backups"
    echo
    yellow "EXAMPLES:"
    echo "  $0 full              # Create full config backup"
    echo "  $0 list              # List all backups"
    echo "  $0 cleanup           # Keep 5 most recent"
    echo "  $0 cleanup 10        # Keep 10 most recent"
    echo
    yellow "BACKUP INCLUDES:"
    echo "  • System configurations (/etc, /boot)"
    echo "  • User configurations (~/.config, ~/.bashrc)"
    echo "  • LibVirt VM/network/storage definitions"
    echo "  • Package lists (explicit, all, AUR)"
    echo "  • System information (hardware, services)"
    echo
    yellow "BACKUP LOCATION:"
    echo "  $CONFIG_BACKUP_DIR"
}

# Main function
main() {
    local command="${1:-}"
    
    case "$command" in
        "full")
            full_backup
            ;;
        "list")
            list_backups
            ;;
        "cleanup")
            cleanup_old_backups "${2:-5}"
            ;;
        "-h"|"--help"|"")
            show_usage
            ;;
        *)
            red "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

# Entry point
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi