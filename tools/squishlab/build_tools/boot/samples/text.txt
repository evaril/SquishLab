gg# Practical prototype starter template
from pgmpy.models import BayesianNetwork
from pgmpy.factors.discrete import TabularCPD
from pgmpy.estimators import BayesianEstimator
import pandas as pd

# Step A: Structural definition (modules with simple IO)
prototype_model = BayesianNetwork([
    ('Module1_Output', 'Module2_Input'),
    ('Module2_Input', 'Module2_Output')
])

# Step B & C: Define CPDs (initial expert baseline)
cpd_mod1_output = TabularCPD('Module1_Output', 2, [[0.5], [0.5]])
cpd_mod2_output = TabularCPD('Module2_Output', 2,
                             [[0.8, 0.1],
                              [0.2, 0.9]],
                             evidence=['Module2_Input'],
                             evidence_card=[2])

cpd_mod2_input = TabularCPD('Module2_Input', 2,
                            [[0.6, 0.4],
                             [0.4, 0.6]],
                            evidence=['Module1_Output'],
                            evidence_card=[2])

prototype_model.add_cpds(cpd_mod1_output, cpd_mod2_input, cpd_mod2_output)
prototype_model.check_model()

# Step D: Train CPDs using real historical data (csv format)
historical_data = pd.read_csv('historical_configurations.csv')
prototype_model.fit(historical_data, estimator=BayesianEstimator, prior_type='BDeu')

# Step E: Validate and infer practically
from pgmpy.inference import VariableElimination

inference_engine = VariableElimination(prototype_model)
result = inference_engine.query(variables=['Module2_Output'], evidence={'Module1_Output': 1})
print(result)