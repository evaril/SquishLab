#!/bin/bash
# squishBootReset.mscr - rEFInd + UKI Boot Management
# Author: evm
# Version: 2.0-fixed
# Boot Architecture: UEFI → rEFInd → UKI → Kernel + LUKS

set -euo pipefail

# Color functions
red() { printf '\033[0;31m%s\033[0m\n' "$*"; }
green() { printf '\033[0;32m%s\033[0m\n' "$*"; }
yellow() { printf '\033[1;33m%s\033[0m\n' "$*"; }
blue() { printf '\033[0;34m%s\033[0m\n' "$*"; }
cyan() { printf '\033[0;36m%s\033[0m\n' "$*"; }
magenta() { printf '\033[0;35m%s\033[0m\n' "$*"; }

# Configuration
readonly DRY_RUN="${DRY_RUN:-false}"
readonly LOG_FILE="$HOME/boot-reset.log"
readonly BACKUP_DIR="$HOME/boot-backups"
readonly TIMESTAMP="$(date +%Y%m%d-%H%M%S)"

# System paths
readonly ESP_MOUNT="/boot"
readonly ESP_DRIVE=""
readonly UKI_NAME="direct-boot"  # Fixed: consistent naming
readonly KERNEL_PKG="linux-hardened"

# Safety gate counters
SAFETY_CHECKS_PASSED=0
REQUIRED_SAFETY_CHECKS=10

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Privilege escalation with detailed prompt
escalate_privilege() {
    local cmd="$1"
    local purpose="$2"
    local fallback="${3:-none}"
    
    if [[ $EUID -eq 0 ]]; then
        eval "$cmd"
        return $?
    fi
    
    echo
    yellow "[PRIVILEGE] $purpose"
    echo "- Command: $cmd"
    echo "- Purpose: $purpose"
    [[ "$fallback" != "none" ]] && echo "- Fallback: $fallback"
    echo -n "Escalate? (y/N/fallback): "
    read -r response
    
    case "$response" in
        y|Y)
            sudo bash -c "$cmd"
            ;;
        f|F|fallback)
            if [[ "$fallback" != "none" ]]; then
                eval "$fallback"
            else
                return 1
            fi
            ;;
        *)
            return 1
            ;;
    esac
}

# Safety gate tracker
safety_gate_passed() {
    local gate_name="$1"
    SAFETY_CHECKS_PASSED=$((SAFETY_CHECKS_PASSED + 1))  # Fixed: arithmetic
    log "SAFETY GATE PASSED: $gate_name ($SAFETY_CHECKS_PASSED/$REQUIRED_SAFETY_CHECKS)"
    green "[GATE $SAFETY_CHECKS_PASSED/$REQUIRED_SAFETY_CHECKS] PASSED: $gate_name"
}

# LUKS detection - comprehensive check
detect_luks_setup() {
    local luks_found=false
    local issues=()
    
    blue "=== LUKS Configuration Analysis ==="
    
    # Check mapped devices
    if [[ -e /dev/mapper/cryptroot ]] || [[ -e /dev/mapper/root ]]; then
        green "Found mapped root device"
        luks_found=true
    fi
    
    # Check crypttab
    if [[ -f /etc/crypttab ]]; then
        echo "Crypttab entries:"
        cat /etc/crypttab | grep -v '^#' | grep -v '^$' || echo "  (empty)"
        
        # Validate crypttab
        while IFS=' ' read -r name device keyfile options; do
            [[ -z "$name" ]] && continue
            [[ "$name" =~ ^# ]] && continue
            
            if [[ ! -e "/dev/mapper/$name" ]]; then
                issues+=("crypttab entry '$name' not mapped")
            fi
        done < /etc/crypttab
    else
        issues+=("No /etc/crypttab found")
    fi
    
    # Check fstab for LUKS references
    echo
    echo "Checking fstab for LUKS devices:"
    grep -E '(mapper|crypt)' /etc/fstab 2>/dev/null || echo "  No LUKS devices in fstab"
    
    # Check kernel cmdline
    echo
    echo "Kernel LUKS parameters:"
    grep -o -E '(cryptdevice|rd\.luks\.[^[:space:]]+)' /proc/cmdline || echo "  No LUKS parameters found"
    
    # Find LUKS devices on system
    echo
    echo "Scanning for LUKS devices:"
    local luks_devices=()
    for device in $(lsblk -rno NAME,TYPE | grep -E 'part|disk' | cut -d' ' -f1); do
        if escalate_privilege "cryptsetup isLuks /dev/$device 2>/dev/null" \
           "Check if /dev/$device is LUKS" \
           "echo 'Skipping /dev/$device check'"; then
            luks_devices+=("/dev/$device")
            green "  LUKS device: /dev/$device"
            luks_found=true
        fi
    done
    
    # Show issues and fixes
    if [[ ${#issues[@]} -gt 0 ]]; then
        echo
        yellow "Configuration issues found:"
        for issue in "${issues[@]}"; do
            echo "  - $issue"
        done
        
        echo
        echo "Suggested fixes:"
        
        # Generate crypttab if missing
        if [[ ! -f /etc/crypttab ]] && [[ ${#luks_devices[@]} -gt 0 ]]; then
            echo
            cyan "Suggested /etc/crypttab:"
            echo "# <name>  <device>  <keyfile>  <options>"
            for device in "${luks_devices[@]}"; do
                local uuid=$(escalate_privilege "cryptsetup luksUUID $device 2>/dev/null" "Get LUKS UUID" "echo unknown")
                echo "cryptroot  UUID=$uuid  /etc/keys/root.key  luks"
            done
            
            echo
            echo -n "Create this crypttab? (y/N): "
            read -r response
            if [[ "$response" =~ ^[Yy]$ ]]; then
                # Backup and create
                [[ -f /etc/crypttab ]] && escalate_privilege "cp /etc/crypttab /etc/crypttab.bak" "Backup crypttab"
                escalate_privilege "echo '# Generated by squishBootReset' > /etc/crypttab" "Create crypttab"
                for device in "${luks_devices[@]}"; do
                    local uuid=$(escalate_privilege "cryptsetup luksUUID $device 2>/dev/null" "Get LUKS UUID" "echo unknown")
                    escalate_privilege "echo 'cryptroot  UUID=$uuid  /etc/keys/root.key  luks' >> /etc/crypttab" "Add crypttab entry"
                done
            fi
        fi
    fi
    
    return $([ "$luks_found" = true ] && echo 0 || echo 1)
}

# Check ESP filesystem and offer fixes
check_esp_filesystem() {
    local esp_device
    esp_device=$(findmnt -n -o SOURCE "$ESP_MOUNT" 2>/dev/null)
    
    if [[ -z "$esp_device" ]]; then
        red "ESP not mounted at $ESP_MOUNT"
        echo "Available partitions:"
        lsblk -o NAME,SIZE,FSTYPE,LABEL,MOUNTPOINT | grep -E '(fat|vfat|EFI|esp|boot)'
        echo
        echo -n "Enter ESP device (e.g., /dev/sda1): "
        read -r esp_device
        
        if [[ -b "$esp_device" ]]; then
            escalate_privilege "mount $esp_device $ESP_MOUNT" "Mount ESP"
        else
            return 1
        fi
    fi
    
    local esp_fstype
    esp_fstype=$(findmnt -n -o FSTYPE "$ESP_MOUNT")
    
    if [[  "vfat" == $("$esp_fstype") ]]; then
        yellow "ESP filesystem is not FAT32: $esp_fstype"
        echo "UEFI requires FAT32 filesystem"
        echo
        echo -n "Reformat ESP to FAT32? This will ERASE all data! (type 'REFORMAT' to confirm): "
        read -r response
        
        if [[ "$response" == "REFORMAT" ]]; then
            # Backup first
            local esp_backup="$BACKUP_DIR/esp-reformat-backup-$TIMESTAMP"
            escalate_privilege "mkdir -p '$esp_backup'" "Create backup directory"
            escalate_privilege "cp -r '$ESP_MOUNT'/* '$esp_backup/' 2>/dev/null || true" "Backup ESP contents"
            
            # Unmount and reformat
            escalate_privilege "umount '$ESP_MOUNT'" "Unmount ESP"
            escalate_privilege "mkfs.fat -F32 -n 'ESP' '$esp_device'" "Format ESP as FAT32"
            escalate_privilege "mount '$esp_device' '$ESP_MOUNT'" "Remount ESP"
            
            green "ESP reformatted as FAT32"
            green "Backup saved to: $esp_backup"
        else
            return 1
        fi
    fi
    
    return 0
}

# Check kernel installation
ensure_kernel_installed() {
    if [[  "vmlinuz-$KERNEL_PKG" != $(sudo ls /boot) ]]; then
        yellow "Kernel not found: /boot/vmlinuz-$KERNEL_PKG"
        echo "Installing kernel package: $KERNEL_PKG"
        
        if escalate_privilege "sudo pacman -S --needed $KERNEL_PKG" "Install kernel package"; then
            green "Kernel installed successfully"
        else
            red "Failed to install kernel"
            return 1
        fi
    fi
    
    if [[ ! -f "/boot/initramfs-$KERNEL_PKG.img" ]]; then
        yellow "Initramfs not found, generating..."
        escalate_privilege "mkinitcpio -p $KERNEL_PKG" "Generate initramfs"
    fi
    
    return 0
}

# Check and fix mkinitcpio hooks
check_mkinitcpio_hooks() {
    local config="/etc/mkinitcpio.conf"
    local needs_update=false
    local current_hooks
    
    blue "=== Checking mkinitcpio configuration ==="
    
    if [[ ! -f "$config" ]]; then
        red "mkinitcpio.conf not found!"
        return 1
    fi
    
    # Extract current HOOKS line
    current_hooks=$(grep '^HOOKS=' "$config" | sed 's/HOOKS=//')
    echo "Current hooks: $current_hooks"
    
    # Check for systemd hooks
    if echo "$current_hooks" | grep -q -E '(systemd|sd-vconsole|sd-encrypt)'; then
        yellow "Found systemd hooks - these should be replaced:"
        echo "  systemd → udev"
        echo "  sd-vconsole → keymap consolefont"
        echo "  sd-encrypt → encrypt"
        needs_update=true
    fi
    
    # Check for required hooks
    local required_hooks=("udev" "encrypt" "filesystems")
    local missing_hooks=()
    
    for hook in "${required_hooks[@]}"; do
        if ! echo "$current_hooks" | grep -q "$hook"; then
            missing_hooks+=("$hook")
        fi
    done
    
    if [[ ${#missing_hooks[@]} -gt 0 ]]; then
        yellow "Missing required hooks: ${missing_hooks[*]}"
        needs_update=true
    fi
    
    if [[ "$needs_update" == "true" ]]; then
        # Generate new hooks
        local new_hooks="$current_hooks"
        new_hooks=$(echo "$new_hooks" | sed 's/systemd/udev/g')
        new_hooks=$(echo "$new_hooks" | sed 's/sd-vconsole/keymap consolefont/g')
        new_hooks=$(echo "$new_hooks" | sed 's/sd-encrypt/encrypt/g')
        
        echo
        cyan "Suggested HOOKS configuration:"
        echo "HOOKS=$new_hooks"
        echo
        yellow "Diff:"
        echo "- HOOKS=$current_hooks"
        echo "+ HOOKS=$new_hooks"
        echo
        echo -n "Apply these changes? (y/N): "
        read -r response
        
        if [[ "$response" =~ ^[Yy]$ ]]; then
            # Backup and update
            escalate_privilege "cp '$config' '$config.bak.$TIMESTAMP'" "Backup mkinitcpio.conf"
            escalate_privilege "sed -i.tmp 's|^HOOKS=.*|HOOKS=$new_hooks|' '$config'" "Update mkinitcpio hooks"
            
            # Regenerate initramfs
            echo "Regenerating initramfs..."
            escalate_privilege "mkinitcpio -P" "Regenerate all initramfs"
            
            green "mkinitcpio configuration updated"
        fi
    else
        green "mkinitcpio hooks look correct"
    fi
}

# Install/update rEFInd
install_refind() {
    local refind_dir="$ESP_MOUNT/EFI/refind"
    
    blue "=== rEFInd Installation/Update ==="
    
    if [[ -d "$refind_dir" ]]; then
        echo "rEFInd already installed at: $refind_dir"
        echo -n "Reinstall/update rEFInd? (y/N): "
        read -r response
        [[ ! "$response" =~ ^[Yy]$ ]] && return 0
    fi
    
    # Check if refind package is installed
    if ! sudo pacman -Q refind >/dev/null 2>&1; then
        echo "Installing rEFInd package..."
        escalate_privilege "sudo pacman -S refind" "Install rEFInd"
    fi
    
    # Install to ESP
    echo "Installing rEFInd to ESP..."
    escalate_privilege "refind-install" "Install rEFInd bootloader"
    
    # Create/update refind.conf
    local refind_conf="$refind_dir/refind.conf"
    if [[ ! -f "$refind_conf" ]]; then
        cat > /tmp/refind.conf << 'EOF'
# rEFInd configuration for UKI boot
timeout 5
use_nvram false
scan_all_linux_kernels false
fold_linux_kernels false
default_selection "direct-boot.efi"

# Automatically detect UKIs in /EFI/Linux/
also_scan_dirs +,/EFI/Linux

# Manual entry for our UKI (backup)
menuentry "Direct Boot UKI" {
    loader /EFI/Linux/direct-boot.efi
    icon /EFI/refind/icons/os_arch.png
}
EOF
        escalate_privilege "cp /tmp/refind.conf '$refind_conf'" "Install rEFInd config"
        rm /tmp/refind.conf
    fi
    
    green "rEFInd installed/updated successfully"
}

# Create UKI with proper parameters
create_uki() {
    local output_file="${1:-$ESP_MOUNT/EFI/Linux/$UKI_NAME.efi}"
    
    blue "=== Creating UKI ==="
    
    # Ensure directories exist
    escalate_privilege "mkdir -p '$(dirname "$output_file")'" "Create UKI directory"
    
    # Extract and clean kernel parameters
    local cmdline=$(cat /proc/cmdline | sed -e 's/BOOT_IMAGE=[^ ]* //g' -e 's/initrd=[^ ]* //g')
    
    echo "Kernel parameters: $cmdline"
    
    # Build UKI
    local temp_uki="/tmp/uki-$TIMESTAMP.efi"
    if escalate_privilege "ukify build \
        --linux='/boot/vmlinuz-$KERNEL_PKG' \
        --initrd='/boot/initramfs-$KERNEL_PKG.img' \
        --cmdline='$cmdline' \
        --output='$temp_uki'" "Build UKI"; then
        
        escalate_privilege "cp '$temp_uki' '$output_file'" "Install UKI"
        escalate_privilege "rm -f '$temp_uki'" "Clean temp UKI"
        
        green "UKI created: $output_file"
        return 0
    else
        red "Failed to create UKI"
        return 1
    fi
}

# Reconfigure existing boot (preserves rEFInd, updates UKI)
reconfigure_boot() {
    blue "=== Reconfiguring Boot System ==="
    
    # Safety checks
    check_esp_filesystem || return 1
    ensure_kernel_installed || return 1
    check_mkinitcpio_hooks
    detect_luks_setup
    
    # Backup current configuration
    local backup_path="$BACKUP_DIR/boot-backup-$TIMESTAMP"
    escalate_privilege "mkdir -p '$backup_path'" "Create backup directory"
    escalate_privilege "cp -r '$ESP_MOUNT' '$backup_path/ESP-backup'" "Backup ESP"
    
    # Update/install rEFInd
    install_refind
    
    # Create new UKI
    create_uki
    
    # Clean old configurations
    echo
    echo "Cleaning old boot entries..."
    
    # Remove systemd-boot if present
    if [[ -d "$ESP_MOUNT/EFI/systemd" ]]; then
        echo -n "Remove systemd-boot? (y/N): "
        read -r response
        [[ "$response" =~ ^[Yy]$ ]] && escalate_privilege "rm -rf '$ESP_MOUNT/EFI/systemd'" "Remove systemd-boot"
    fi
    
    # Remove GRUB if present
    if [[ -d "$ESP_MOUNT/EFI/grub" ]] || [[ -d "$ESP_MOUNT/grub" ]]; then
        echo -n "Remove GRUB? (y/N): "
        read -r response
        [[ "$response" =~ ^[Yy]$ ]] && escalate_privilege "rm -rf '$ESP_MOUNT/EFI/grub' '$ESP_MOUNT/grub'" "Remove GRUB"
    fi
    
    # Create UEFI entry for direct UKI boot
    local esp_device esp_disk esp_part_num
    esp_device=$(findmnt -n -o SOURCE "$ESP_MOUNT")
    
    if [[ "$esp_device" =~ nvme ]]; then
        esp_disk=$(echo "$esp_device" | sed 's/p[0-9]*$//')
        esp_part_num=$(echo "$esp_device" | sed 's/.*p//')
    else
        esp_disk=$(echo "$esp_device" | sed 's/[0-9]*$//')
        esp_part_num=$(echo "$esp_device" | sed 's/.*[^0-9]//')
    fi
    
    escalate_privilege "efibootmgr -c -d '$esp_disk' -p '$esp_part_num' -L 'Direct Boot' -l '\\EFI\\Linux\\$UKI_NAME.efi'" \
        "Create UEFI entry for UKI"
    
    green "Boot system reconfigured successfully"
    green "Backup saved to: $backup_path"
}

# Full reset (wipe and reinstall)
reset_boot() {
    blue "=== Full Boot Reset ==="
    
    red "WARNING: This will completely wipe and rebuild your boot configuration!"
    echo -n "Type 'RESET' to confirm: "
    read -r response
    [[ "$response" != "RESET" ]] && return 1
    
    # Ensure ESP is properly formatted
    check_esp_filesystem || return 1
    ensure_kernel_installed || return 1
    check_mkinitcpio_hooks
    detect_luks_setup
    
    # Backup before wipe
    local backup_path="$BACKUP_DIR/boot-reset-backup-$TIMESTAMP"
    escalate_privilege "mkdir -p '$backup_path'" "Create backup directory"
    escalate_privilege "cp -r '$ESP_MOUNT' '$backup_path/ESP-backup' 2>/dev/null || true" "Backup ESP"
    
    # Wipe ESP contents
    echo "Wiping ESP contents..."
    escalate_privilege "find '$ESP_MOUNT' -mindepth 1 -delete" "Wipe ESP"
    
    # Create fresh structure
    escalate_privilege "mkdir -p '$ESP_MOUNT/EFI'/{BOOT,Linux}" "Create ESP structure"
    
    # Install rEFInd fresh
    install_refind
    
    # Create UKI
    create_uki
    
    # Create fallback
    escalate_privilege "cp '$ESP_MOUNT/EFI/Linux/$UKI_NAME.efi' '$ESP_MOUNT/EFI/BOOT/BOOTX64.EFI'" \
        "Create UEFI fallback"
    
    green "Boot system reset completed"
    green "Backup saved to: $backup_path"
}

# Verify boot configuration
verify_boot() {
    blue "=== Boot Configuration Verification ==="
    
    local errors=0
    
    # Check ESP
    if mountpoint -q "$ESP_MOUNT"; then
        green "[PASS] ESP mounted at $ESP_MOUNT"
    else
        red "[FAIL] ESP not mounted"
        ((errors++))
    fi
    
    # Check rEFInd
    if [[ -f "$ESP_MOUNT/EFI/refind/refind_x64.efi" ]]; then
        green "[PASS] rEFInd installed"
    else
        red "[FAIL] rEFInd not found"
        ((errors++))
    fi
    
    # Check UKI
    if [[ -f "$ESP_MOUNT/EFI/Linux/$UKI_NAME.efi" ]]; then
        green "[PASS] UKI present: $UKI_NAME.efi"
        local uki_size=$(du -h "$ESP_MOUNT/EFI/Linux/$UKI_NAME.efi" | cut -f1)
        echo "      Size: $uki_size"
    else
        red "[FAIL] UKI missing"
        ((errors++))
    fi
    
    # Check UEFI entries
    echo
    echo "UEFI Boot Entries:"
    efibootmgr -v
    
    if efibootmgr | grep -q "Direct Boot"; then
        green "[PASS] Direct Boot UEFI entry found"
    else
        yellow "[WARN] Direct Boot UEFI entry missing"
    fi
    
    # Check mkinitcpio hooks
    echo
    echo "mkinitcpio hooks:"
    grep '^HOOKS=' /etc/mkinitcpio.conf
    
    if grep '^HOOKS=' /etc/mkinitcpio.conf | grep -q -E '(systemd|sd-encrypt)'; then
        yellow "[WARN] systemd hooks still present"
    else
        green "[PASS] No systemd hooks found"
    fi
    
    # Summary
    echo
    if [[ $errors -eq 0 ]]; then
        green "Boot verification PASSED"
    else
        red "Boot verification FAILED with $errors errors"
    fi
    
    return $errors
}

# Show usage
show_usage() {
    green "squishBootReset v2.0 - rEFInd + UKI Boot Management"
    echo
    yellow "USAGE:"
    echo "  $0 {reconfigure|reset|verify|help}"
    echo
    yellow "COMMANDS:"
    echo "  reconfigure - Update existing boot configuration (preserves rEFInd)"
    echo "  reset       - Complete wipe and reinstall of boot system"
    echo "  verify      - Check boot configuration integrity"
    echo "  help        - Show this help"
    echo
    yellow "FEATURES:"
    echo "  • Comprehensive LUKS detection and configuration"
    echo "  • Automatic filesystem format detection and fixes"
    echo "  • Kernel installation if missing"
    echo "  • mkinitcpio hook migration (systemd → udev/encrypt)"
    echo "  • rEFInd bootloader management"
    echo "  • UKI creation with proper parameters"
    echo "  • Interactive privilege escalation"
    echo
    cyan "Boot flow: UEFI → rEFInd → UKI → Kernel + LUKS"
}

# Main
main() {
    local command="${1:-help}"
    
    log "Starting squishBootReset: $command"
    
    case "$command" in
        reconfigure)
            reconfigure_boot
            ;;
        reset)
            reset_boot
            ;;
        verify)
            verify_boot
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            red "Unknown command: $command"
            show_usage
            exit 1
            ;;
    esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
