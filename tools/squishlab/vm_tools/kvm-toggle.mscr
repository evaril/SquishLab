#!/bin/bash

# KVM USB Toggle - Complete TUI Version
set -u

# Config
CONFIG_FILE="${HOME}/.config/kvm-toggle.conf"
LOG_FILE="${HOME}/.cache/kvm-toggle.log"

# Colors - use printf for proper formatting
RED=$'\033[0;31m'
GREEN=$'\033[0;32m'
YELLOW=$'\033[1;33m'
BLUE=$'\033[0;34m'
NC=$'\033[0m'
CLEAR=$'\033[2J\033[H'

# State tracking
LAST_ACTION=""
LAST_STATUS=""
VM_NAME=""
DEVICE_COUNT=0

# Initialize
mkdir -p "$(dirname "$LOG_FILE")"
touch "$LOG_FILE"

# Logging with history
log() {
    local level="$1"
    local msg="$2"
    local timestamp=$(date '+%H:%M:%S')
    
    # Log to file
    echo "[$timestamp] $level: $msg" >> "$LOG_FILE"
    
    # Update last action for display
    case "$level" in
        ERROR)   
            LAST_ACTION="${RED}✗ $msg${NC}"
            LAST_STATUS="error"
            ;;
        SUCCESS) 
            LAST_ACTION="${GREEN}✓ $msg${NC}"
            LAST_STATUS="success"
            ;;
        INFO)    
            LAST_ACTION="${BLUE}→ $msg${NC}"
            LAST_STATUS="info"
            ;;
        WARN)    
            LAST_ACTION="${YELLOW}! $msg${NC}"
            LAST_STATUS="warn"
            ;;
    esac
}

# Load config
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE" 2>/dev/null || return 1
        return 0
    fi
    return 1
}

# Save config
save_config() {
    mkdir -p "$(dirname "$CONFIG_FILE")"
    {
        echo "# KVM USB Toggle Configuration"
        echo "# Last modified: $(date)"
        echo
        echo "VM_NAME=\"$VM_NAME\""
        echo "DEVICE_COUNT=$DEVICE_COUNT"
        echo
        for i in $(seq 0 $((DEVICE_COUNT - 1))); do
            eval "echo \"DEVICE_${i}_ID=\\\"\$DEVICE_${i}_ID\\\"\""
            eval "echo \"DEVICE_${i}_NAME=\\\"\$DEVICE_${i}_NAME\\\"\""
        done
    } > "$CONFIG_FILE"
}

# Check if VM is running
vm_running() {
    local vm="$1"
    virsh list --state-running --name 2>/dev/null | grep -q "^${vm}$"
}

# Get device status
device_status() {
    local vm="$1"
    local device_id="$2"
    
    if [[ -z "$device_id" ]] || [[ -z "$vm" ]]; then
        echo "detached"
        return
    fi
    
    local vendor="${device_id%:*}"
    local product="${device_id#*:}"
    
    if virsh dumpxml "$vm" 2>/dev/null | grep -q "vendor.*0x${vendor}.*product.*0x${product}"; then
        if lsusb -d "$device_id" &>/dev/null; then
            echo "attached"
        else
            echo "stale"
        fi
    else
        echo "detached"
    fi
}

# Attach device
attach_device() {
    local vm="$1"
    local device_id="$2"
    local device_name="$3"
    
    local xml="<hostdev mode='subsystem' type='usb' managed='no'>
  <source>
    <vendor id='0x${device_id%:*}'/>
    <product id='0x${device_id#*:}'/>
  </source>
</hostdev>"
    
    if echo "$xml" | virsh attach-device "$vm" /dev/stdin --persistent &>/dev/null; then
        printf "  ${GREEN}✓${NC} %s\n" "$device_name"
        return 0
    else
        printf "  ${RED}✗${NC} %s\n" "$device_name"
        return 1
    fi
}

# Detach device
detach_device() {
    local vm="$1"
    local device_id="$2"
    local device_name="$3"
    
    local xml="<hostdev mode='subsystem' type='usb' managed='no'>
  <source>
    <vendor id='0x${device_id%:*}'/>
    <product id='0x${device_id#*:}'/>
  </source>
</hostdev>"
    
    if echo "$xml" | virsh detach-device "$vm" /dev/stdin --persistent &>/dev/null; then
        printf "  ${GREEN}✓${NC} %s\n" "$device_name"
        return 0
    else
        printf "  ${YELLOW}!${NC} %s (not attached)\n" "$device_name"
        return 1
    fi
}

# Attach all
cmd_attach() {
    if ! vm_running "$VM_NAME"; then
        log ERROR "VM not running"
        return 1
    fi
    
    echo "Attaching devices..."
    local count=0
    for i in $(seq 0 $((DEVICE_COUNT - 1))); do
        eval "local id=\$DEVICE_${i}_ID"
        eval "local name=\$DEVICE_${i}_NAME"
        attach_device "$VM_NAME" "$id" "$name" && ((count++))
    done
    
    log SUCCESS "Attached $count/$DEVICE_COUNT devices"
}

# Detach all
cmd_detach() {
    if ! vm_running "$VM_NAME"; then
        log ERROR "VM not running"
        return 1
    fi
    
    echo "Detaching devices..."
    local count=0
    for i in $(seq 0 $((DEVICE_COUNT - 1))); do
        eval "local id=\$DEVICE_${i}_ID"
        eval "local name=\$DEVICE_${i}_NAME"
        detach_device "$VM_NAME" "$id" "$name" && ((count++))
    done
    
    log SUCCESS "Detached $count devices"
}

# Cleanup stale
cmd_cleanup() {
    echo "Cleaning stale devices..."
    local cleaned=0
    
    local devices=$(virsh dumpxml "$VM_NAME" 2>/dev/null | \
                    grep -A2 "hostdev.*usb" | \
                    grep -E "vendor|product" | paste - - | \
                    sed 's/.*vendor.*0x\([0-9a-f]*\).*product.*0x\([0-9a-f]*\).*/\1:\2/')
    
    while read -r device_id; do
        [[ -n "$device_id" ]] || continue
        
        if ! lsusb -d "$device_id" &>/dev/null; then
            printf "  ${YELLOW}!${NC} Removing stale: %s\n" "$device_id"
            local xml="<hostdev mode='subsystem' type='usb' managed='no'>
  <source>
    <vendor id='0x${device_id%:*}'/>
    <product id='0x${device_id#*:}'/>
  </source>
</hostdev>"
            echo "$xml" | virsh detach-device "$VM_NAME" /dev/stdin --persistent &>/dev/null && ((cleaned++))
        fi
    done <<< "$devices"
    
    log SUCCESS "Removed $cleaned stale devices"
}

# Setup in TUI
tui_setup() {
    clear
    echo "Setup Configuration"
    echo "═══════════════════════════════════════"
    
    # If we have an existing config, detach all devices first
    if [[ -n "$VM_NAME" ]] && [[ $DEVICE_COUNT -gt 0 ]]; then
        echo "Cleaning up existing configuration..."
        
        # Detach any attached devices
        if vm_running "$VM_NAME"; then
            local attached_count=0
            for i in $(seq 0 $((DEVICE_COUNT - 1))); do
                eval "local id=\$DEVICE_${i}_ID"
                if [[ "$(device_status "$VM_NAME" "$id")" == "attached" ]]; then
                    ((attached_count++))
                fi
            done
            
            if [[ $attached_count -gt 0 ]]; then
                echo "Detaching $attached_count device(s) from $VM_NAME..."
                for i in $(seq 0 $((DEVICE_COUNT - 1))); do
                    eval "local id=\$DEVICE_${i}_ID"
                    eval "local name=\$DEVICE_${i}_NAME"
                    if [[ "$(device_status "$VM_NAME" "$id")" == "attached" ]]; then
                        detach_device "$VM_NAME" "$id" "$name" >/dev/null 2>&1
                    fi
                done
                echo "Cleanup complete"
            fi
        fi
        
        # Clear old config
        VM_NAME=""
        DEVICE_COUNT=0
        echo
    fi
    
    # List VMs
    local vms=$(virsh list --all --name 2>/dev/null | grep -v "^$")
    if [[ -z "$vms" ]]; then
        log ERROR "No VMs found"
        read -p "Press Enter to continue..."
        return 1
    fi
    
    echo "Available VMs:"
    echo "$vms" | nl -v 1
    echo
    
    read -p "Select VM number: " num
    VM_NAME=$(echo "$vms" | sed -n "${num}p")
    
    if [[ -z "$VM_NAME" ]]; then
        log ERROR "Invalid selection"
        read -p "Press Enter to continue..."
        return 1
    fi
    
    # List USB devices
    clear
    echo "Select USB Devices for: $VM_NAME"
    echo "═══════════════════════════════════════"
    echo
    
    local devices=$(lsusb | grep -v "hub\|Hub")
    echo "$devices" | nl -v 1
    echo
    
    read -p "Select devices (space-separated): " selections
    
    DEVICE_COUNT=0
    for num in $selections; do
        local line=$(echo "$devices" | sed -n "${num}p")
        if [[ -n "$line" ]]; then
            local id=$(echo "$line" | grep -oE 'ID [0-9a-f:]+' | cut -d' ' -f2)
            local name=$(echo "$line" | sed 's/.*ID [0-9a-f:]* //')
            
            eval "DEVICE_${DEVICE_COUNT}_ID=\"$id\""
            eval "DEVICE_${DEVICE_COUNT}_NAME=\"$name\""
            ((DEVICE_COUNT++))
        fi
    done
    
    save_config
    log SUCCESS "Configuration saved: $DEVICE_COUNT devices"
    read -p "Press Enter to continue..."
}

# Edit config in TUI
tui_edit_config() {
    clear
    echo "Current Configuration"
    echo "═══════════════════════════════════════"
    echo
    
    if [[ -f "$CONFIG_FILE" ]]; then
        cat "$CONFIG_FILE"
    else
        echo "No configuration file found"
    fi
    
    echo
    echo "═══════════════════════════════════════"
    echo "[e] Edit with ${EDITOR:-nano}"
    echo "[d] Delete configuration"
    echo "[b] Back"
    echo
    
    read -n1 -p "Choice: " choice
    case "$choice" in
        e) ${EDITOR:-nano} "$CONFIG_FILE"; load_config ;;
        d) 
            rm -f "$CONFIG_FILE"
            VM_NAME=""
            DEVICE_COUNT=0
            log SUCCESS "Configuration deleted"
            read -p "Press Enter..."
            ;;
    esac
}

# View logs
tui_view_logs() {
    clear
    echo "Recent Activity (last 20 entries)"
    echo "═══════════════════════════════════════"
    tail -20 "$LOG_FILE" 2>/dev/null || echo "No logs found"
    echo
    read -p "Press Enter to continue..."
}

# Main TUI
tui_main() {
    while true; do
        # Reload config
        load_config
        
        # Clear and draw header
        printf "%s" "$CLEAR"
        echo "KVM USB Toggle - TUI"
        echo "═══════════════════════════════════════"
        
        # System status
        printf "Config: "
        if [[ -f "$CONFIG_FILE" ]]; then
            printf "${GREEN}%s${NC}\n" "$CONFIG_FILE"
        else
            printf "${RED}Not found${NC}\n"
        fi
        
        # Last action
        if [[ -n "$LAST_ACTION" ]]; then
            printf "Last Action: %s\n" "$LAST_ACTION"
        fi
        
        echo "═══════════════════════════════════════"
        
        # VM and device status
        if [[ -n "$VM_NAME" ]]; then
            printf "VM: ${BLUE}%s${NC} " "$VM_NAME"
            
            if vm_running "$VM_NAME"; then
                printf "${GREEN}[Running]${NC}\n"
            else
                printf "${RED}[Stopped]${NC}\n"
            fi
            
            echo
            echo "Devices:"
            printf "%-50s %s\n" "Name" "Status"
            printf "%-50s %s\n" "──────────────────────────────────────────────────" "──────────"
            
            for i in $(seq 0 $((DEVICE_COUNT - 1))); do
                eval "local id=\$DEVICE_${i}_ID"
                eval "local name=\$DEVICE_${i}_NAME"
                local status=$(device_status "$VM_NAME" "$id")
                
                # Truncate long names
                if [[ ${#name} -gt 48 ]]; then
                    name="${name:0:45}..."
                fi
                
                local status_display=""
                case "$status" in
                    attached) status_display="${GREEN}● Attached${NC}" ;;
                    stale)    status_display="${YELLOW}● Stale${NC}" ;;
                    detached) status_display="${BLUE}● Detached${NC}" ;;
                esac
                
                printf "%-50s %b\n" "$name" "$status_display"
            done
        else
            echo "No configuration loaded"
        fi
        
        # Menu
        echo
        echo "═══════════════════════════════════════"
        
        if [[ -n "$VM_NAME" ]]; then
            echo "USB Operations:"
            echo "  [a] Attach all      [d] Detach all"
            echo "  [c] Cleanup stale"
            echo
            echo "Configuration:"
            echo "  [s] New setup       [e] Edit config"
            echo "  [r] Reload config   [l] View logs"
            echo
            echo "  [q] Quit"
        else
            echo "[s] Setup"
            echo "[q] Quit"
        fi
        
        echo
        read -n1 -p "Choice: " choice
        echo
        
        case "$choice" in
            a) 
                if [[ -n "$VM_NAME" ]]; then
                    echo
                    cmd_attach
                    echo
                    echo "──────────────────────────────────────"
                    printf "${YELLOW}Enter${NC} = Detach all devices\n"
                    printf "${BLUE}Any key${NC} = Return to menu\n"
                    echo "──────────────────────────────────────"
                    read -n1 response
                    if [[ -z "$response" ]]; then
                        echo
                        cmd_detach
                        read -p "Press Enter to continue..."
                    fi
                fi
                ;;
            d) [[ -n "$VM_NAME" ]] && { echo; cmd_detach; read -p "Press Enter..."; } ;;
            c) [[ -n "$VM_NAME" ]] && { echo; cmd_cleanup; read -p "Press Enter..."; } ;;
            r) log INFO "Configuration reloaded" ;;
            s) tui_setup ;;
            e) [[ -n "$VM_NAME" ]] && tui_edit_config ;;
            l) [[ -n "$VM_NAME" ]] && tui_view_logs ;;
            q) break ;;
        esac
    done
    
    # Exit summary
    clear
    echo "KVM USB Toggle - Exit Summary"
    echo "═══════════════════════════════════════"
    
    if [[ -n "$VM_NAME" ]]; then
        echo "VM: $VM_NAME"
        echo
        
        # Count attached devices
        local attached=0
        local attached_names=""
        for i in $(seq 0 $((DEVICE_COUNT - 1))); do
            eval "local id=\$DEVICE_${i}_ID"
            eval "local name=\$DEVICE_${i}_NAME"
            if [[ "$(device_status "$VM_NAME" "$id")" == "attached" ]]; then
                ((attached++))
                attached_names="${attached_names}  • ${name}\n"
            fi
        done
        
        if [[ $attached -gt 0 ]]; then
            printf "${YELLOW}Warning: %d device(s) still attached${NC}\n\n" "$attached"
            printf "%b" "$attached_names"
            echo
            read -p "Detach before exit? [Y/n] " response
            if [[ "${response,,}" != "n" ]]; then
                cmd_detach
            fi
        else
            printf "${GREEN}All devices detached${NC}\n"
        fi
    fi
    
    echo
    echo "Session ended: $(date)"
    echo "Logs saved to: $LOG_FILE"
}

# Help
if [[ "${1:-}" == "help" ]] || [[ "${1:-}" == "--help" ]]; then
    cat <<EOF
KVM USB Toggle

Usage: ${0##*/} [command]

Commands:
  help     Show this help
  tui      Start TUI mode (default)

TUI provides all functionality in an interactive interface.
EOF
    exit 0
fi

# Check requirements
if ! command -v virsh &>/dev/null; then
    echo "Error: virsh not found" >&2
    exit 1
fi

# Need root
if [[ $EUID -ne 0 ]]; then
    echo "Elevating privileges..."
    exec sudo "$0" "$@"
fi

# Start TUI
tui_main
